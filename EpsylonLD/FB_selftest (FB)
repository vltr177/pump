FUNCTION_BLOCK FB_selftest
VAR_INPUT
	input: REFERENCE TO pump_input;
	output: REFERENCE TO pump_output;
	options: REFERENCE TO pump_options;
	state: REFERENCE TO pump_state;
END_VAR
VAR_OUTPUT
	err_malfunction: BOOL;
END_VAR
VAR
END_VAR
-----------------------------------------------------------------------------

// ФУНКЦИОНАЛЬНЫЙ БЛОК САМОТЕСТИРОВАНИЯ

// Проверка события - отключение напряжения в состоянии Отключен на время более чем t_voltage
state.FAL_voltage(CLK:= gvl.input.voltage);
IF state.disabled AND state.FAL_voltage.Q THEN
	state.timer_voltage(PT:=DWORD_TO_TIME(options.t_voltage),IN:=TRUE);			//взводим таймер отсутствия напряжения	//устанавливаем флаг запущенного таймера
END_IF
state.timer_voltage();
IF state.disabled AND state.timer_voltage.Q AND NOT gvl.input.voltage THEN			//если напряжение за допустимое время не появилось, ошибка
	state.err_voltage := 1;
	state.timer_voltage(IN:=FALSE);
ELSIF state.disabled AND state.timer_voltage.Q AND gvl.input.voltage THEN			//если напряжение вернулось за допустимое время, отбой
	state.timer_voltage(IN:=FALSE);
END_IF


// Проверка ошибкок несоответствий параметров насоса состояниям
state.err_disabled := (NOT output.set_start_op AND NOT output.set_start_loc) AND gvl.input.starter;
state.err_starts := (output.set_start_op OR output.set_start_loc) AND (NOT gvl.input.voltage OR NOT gvl.input.starter);
state.err_started := (output.set_start_op OR output.set_start_loc) AND (NOT gvl.input.voltage OR NOT gvl.input.starter);
state.err_stops := (output.set_stop_op OR output.set_stop_loc) AND (NOT gvl.input.voltage OR gvl.input.starter);
state.err_starter := NOT gvl.input.voltage AND gvl.input.starter;


// Проверка допустимого времени запуска по событию - Старт от оператора (или по событию - включение МП для Старт по месту)
state.RIS_start_op(CLK:= output.set_start_op);
state.RIS_starter(CLK:= gvl.input.starter);
IF state.RIS_start_op.Q OR (state.RIS_starter.Q AND output.set_start_loc) THEN
	state.timer_stop(IN:=FALSE);							//на всякий сбрасываем таймер стопа, если прерывали останов
	state.timer_start(PT:=DWORD_TO_TIME(options.t_start),IN:=TRUE);			//взводим таймер времени запуска
END_IF
state.timer_start();
IF state.timer_start.Q AND NOT state.started THEN					//если не набрано необходимое давление за допустимое время, ошибка
	state.err_start_time := 1;
	state.timer_start(IN:=FALSE);
ELSIF state.timer_start.Q AND state.started THEN					//если набрано необходимое давление за допустимое время, отбой
	state.timer_start(IN:=FALSE);
END_IF


// Проверка допустимого времени останова по событию - Стоп от оператора (или по событию - отключение стартера для Стоп по месту)
state.RIS_stop_op(CLK:= output.set_stop_op);
state.FAL_starter(CLK:= gvl.input.starter);
IF state.RIS_stop_op.Q OR (state.FAL_starter.Q AND output.set_stop_loc) THEN
	state.timer_start(IN:=FALSE);							//на всякий сбрасываем таймер пуска, если прерывали запуск
	state.timer_stop(PT:=DWORD_TO_TIME(options.t_stop),IN:=TRUE);			//взводим таймер времени останова
END_IF
state.timer_stop();
IF state.timer_stop.Q AND NOT state.disabled THEN					//если не сброшено давление на необходимый уровень за допустимое время, ошибка
	state.err_stop_time := 1;
	state.timer_stop(IN:=FALSE);
ELSIF state.timer_stop.Q AND state.disabled THEN					//если сброшено давление на необходимый уровень за допустимое время, отбой
	state.timer_stop(IN:=FALSE);
END_IF


// Установка неисправности
err_malfunction := state.err_voltage OR state.err_disabled OR state.err_starts OR state.err_started OR state.err_stops OR state.err_starter OR state.err_start_time OR state.err_stop_time;
